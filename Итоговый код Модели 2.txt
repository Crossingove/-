import datetime

# Функция для расчета коэффициентов асимметрии
def calculate_asymmetry_coefficients(H1, H2, r1, r2, Ik1, Ik2):
    # Расчет значений I1 и I2
    I1 = H1 * 2 * 3.14 * r1
    I2 = H2 * 2 * 3.14 * r2
    # Расчет коэффициента асимметрии сигнального тока
    Kask = abs((Ik1 - Ik2) / (Ik1 + Ik2)) * 100
    # Расчет коэффициента асимметрии тягового тока
    Katt = abs((I1 - I2) / (I1 + I2)) * 100
    # Расчет общего коэффициента асимметрии
    Kas = abs(Katt - Kask)
    return Kask, Katt, Kas

# Основная функция программы
def main():
    # Ввод значений Н1, Н2, r1, r2, Iк1, Iк2
    try:
        H1 = float(input("Введите значение Н1: "))
        H2 = float(input("Введите значение Н2: "))
        r1 = float(input("Введите значение r1: "))
        r2 = float(input("Введите значение r2: "))
        Ik1 = float(input("Введите значение Iк1: "))
        Ik2 = float(input("Введите значение Iк2: "))
    except ValueError:
        print("Внимание! Отсутствуют входные данные")
        return

    # Вызов функции для расчета коэффициентов асимметрии
    Kask, Katt, Kas = calculate_asymmetry_coefficients(H1, H2, r1, r2, Ik1, Ik2)

    # Вывод результатов
    print(f"Высота первой катушки = {r1}м")
    print(f"Высота второй катушки = {r2}м")
    print(f"Коэффициент асимметрии сигнального тока = {Kask} %")
    print(f"Коэффициент асимметрии тягового тока = {Katt} %")
    print(f"Общий коэффициент асимметрии = {Kas} %")

    # Проверка на критический уровень асимметрии
    if Kas > 4:
        print("Критический уровень асимметрии!!!")
        print(datetime.datetime.now())
        # Дата и время критического уровня асимметрии


if __name__ == "__main__":
    main()